name: Publish Client

on:
  push:
    branches:
      - main
      - client_publish
#    paths:
#      - 'core/**'
#      - 'client/**'
#      - 'gradle/**'
#      - 'build.gradle.kts'

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Get current version from build.gradle.kts
        id: get_version
        run: |
          VERSION=$(grep "version = " build.gradle.kts | sed 's/version = "//' | sed 's/"//')
          echo "Current version in build.gradle.kts: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Check if version already exists as a GitHub release
        id: check_release
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          
          # Fetch the list of releases from the GitHub API
          EXISTING_RELEASES=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            | jq -r '.[].tag_name')

          # Check if the version already exists in the releases
          if echo "$EXISTING_RELEASES" | grep -q "v$VERSION"; then
            echo "Version v$VERSION already exists as a release. Skipping build and publish."
            echo "skip_publish=true" >> $GITHUB_ENV
          else
            echo "Version v$VERSION does not exist as a release. Proceeding with publish."
            echo "skip_publish=false" >> $GITHUB_ENV
          fi

      - name: Build and Publish
        if: env.skip_publish != 'true'
        run: ./gradlew publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
