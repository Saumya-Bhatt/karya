name: Update Tag if required

on:
  workflow_run:
    workflows:
      - "publish-client.yml"
      - "publish-docker-image.yml"
    types:
      - completed

jobs:
  version-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Get current version from build.gradle.kts
        id: get_version
        run: |
          VERSION=$(grep "version = " build.gradle.kts | sed 's/version = "//' | sed 's/"//')
          echo "Current version in build.gradle.kts: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Fetch latest tag from GitHub
        id: get_latest_tag
        run: |
          # Fetch the latest tag from the Git repository
          LATEST_TAG=$(git tag --list | sort -V | tail -n 1)
          echo "Latest tag in GitHub repository: $LATEST_TAG"
          echo "::set-output name=latest_tag::$LATEST_TAG"

      - name: Compare versions and update tag
        id: compare_versions
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.version }}
          LATEST_TAG=${{ steps.get_latest_tag.outputs.latest_tag }}

          # If there's no tag yet, create the tag
          if [ -z "$LATEST_TAG" ]; then
            echo "No tag found, creating new tag."
            git tag "v$CURRENT_VERSION"
            git push origin "v$CURRENT_VERSION"
            echo "Created and pushed new tag: v$CURRENT_VERSION"
          else
            # Compare the versions
            LATEST_VERSION=$(echo $LATEST_TAG | sed 's/^v//')  # Remove 'v' prefix from tag
            echo "Comparing versions: current=$CURRENT_VERSION, latest=$LATEST_VERSION"

            # Check if current version is greater than the latest tag
            if [ "$(printf '%s\n' "$CURRENT_VERSION" "$LATEST_VERSION" | sort -V | head -n 1)" != "$LATEST_VERSION" ]; then
              echo "The version is greater. Updating the tag."
              git tag -f "v$CURRENT_VERSION"  # Force create the tag to the new version
              git push --force origin "v$CURRENT_VERSION"
              echo "Updated and pushed tag: v$CURRENT_VERSION"
            elif [ "$CURRENT_VERSION" == "$LATEST_VERSION" ]; then
              echo "The version is the same as the latest tag. No tag update needed."
            else
              echo "ERROR: The version being published is lower than the latest tag ($LATEST_TAG). Aborting."
              exit 1  # Fail the workflow to prevent publishing a lower version
            fi
          fi
